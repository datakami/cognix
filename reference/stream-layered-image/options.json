{"_module.args": {"declarations": [{"name": "lib/modules.nix", "url": "lib/modules.nix"}], "description": "Additional arguments passed to each module in addition to ones\nlike `lib`, `config`,\nand `pkgs`, `modulesPath`.\n\nThis option is also available to all submodules. Submodules do not\ninherit args from their parent module, nor do they provide args to\ntheir parent module or sibling submodules. The sole exception to\nthis is the argument `name` which is provided by\nparent modules to a submodule and contains the attribute name\nthe submodule is bound to, or a unique generated name if it is\nnot bound to an attribute.\n\nSome arguments are already passed by default, of which the\nfollowing *cannot* be changed with this option:\n- {var}`lib`: The nixpkgs library.\n- {var}`config`: The results of all options after merging the values from all modules together.\n- {var}`options`: The options declared in all modules.\n- {var}`specialArgs`: The `specialArgs` argument passed to `evalModules`.\n- All attributes of {var}`specialArgs`\n\n  Whereas option values can generally depend on other option values\n  thanks to laziness, this does not apply to `imports`, which\n  must be computed statically before anything else.\n\n  For this reason, callers of the module system can provide `specialArgs`\n  which are available during import resolution.\n\n  For NixOS, `specialArgs` includes\n  {var}`modulesPath`, which allows you to import\n  extra modules from the nixpkgs package tree without having to\n  somehow make the module aware of the location of the\n  `nixpkgs` or NixOS directories.\n  ```\n  { modulesPath, ... }: {\n    imports = [\n      (modulesPath + \"/profiles/minimal.nix\")\n    ];\n  }\n  ```\n\nFor NixOS, the default value for this option includes at least this argument:\n- {var}`pkgs`: The nixpkgs package set according to\n  the {option}`nixpkgs.pkgs` option.\n", "loc": ["_module", "args"], "readOnly": false, "type": "lazy attribute set of raw value"}, "deps": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/deps", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/deps"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "All dependencies of the package. This option should be set by the \"outer world\" and can be used to inherit attributes from `pkgs` or `inputs` etc.\n\nBy separating the task of retrieving things from the outside world, it is ensured that the dependencies are overridable.\nNothing will stop users from adding `nixpkgs` itself as a dependency, but this will make it very hard for the user of the package to override any dependencies, because they'd have to figure out a way to insert their changes into the Nixpkgs fixpoint. By adding specific attributes to `deps` instead, the user has a realistic chance of overriding those dependencies.\n\nSo deps should be specific, but not overly specific. For instance, the caller shouldn't have to know the version of a dependency in order to override it. The name should suffice. (e.g. `nix = nixVersions.nix_2_12` instead of `inherit (nixVersions) nix_2_12`.\n", "example": {"_type": "literalExpression", "text": "{nixpkgs, ...}: {\n  inherit (nixpkgs) stdenv;\n  inherit (nixpkgs.haskellPackages) pandoc;\n}\n"}, "loc": ["deps"], "readOnly": false, "type": "lazy attribute set of raw value"}, "dockerTools.streamLayeredImage.architecture": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"amd64\""}, "description": "Image architecture, defaults to the architecture of the `hostPlatform` when unset", "loc": ["dockerTools", "streamLayeredImage", "architecture"], "readOnly": false, "type": "string"}, "dockerTools.streamLayeredImage.config": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Docker config; e.g. what command to run on the container.", "loc": ["dockerTools", "streamLayeredImage", "config"], "readOnly": false, "type": "attribute set of anything"}, "dockerTools.streamLayeredImage.contents": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Files to put on the image (a nix store path or list of paths).", "loc": ["dockerTools", "streamLayeredImage", "contents"], "readOnly": false, "type": "list of package"}, "dockerTools.streamLayeredImage.created": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"1970-01-01T00:00:01Z\""}, "description": "Time of creation of the image. Passing \"now\" will\nmake the created date be the time of building.\n", "loc": ["dockerTools", "streamLayeredImage", "created"], "readOnly": false, "type": "string"}, "dockerTools.streamLayeredImage.enableFakechroot": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to run fakeRootCommands in fakechroot as well, so that they\nappear to run inside the image, but have access to the normal Nix store.\nPerhaps this could be enabled on by default on pkgs.stdenv.buildPlatform.isLinux\n", "loc": ["dockerTools", "streamLayeredImage", "enableFakechroot"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.extraCommands": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Optional bash script to run on the files prior to fixturizing the layer.", "loc": ["dockerTools", "streamLayeredImage", "extraCommands"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "dockerTools.streamLayeredImage.extraJSONFile": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"/nix/store/6llq5mliaf03nj25ib0lm841cgjw5mbg-empty.json\""}, "description": "JSON file that's merged into the stream configuration.\nUse this to add things only available at build time, such as other build results.\n", "loc": ["dockerTools", "streamLayeredImage", "extraJSONFile"], "readOnly": false, "type": "path"}, "dockerTools.streamLayeredImage.fakeRootCommands": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Optional bash script to run inside fakeroot environment.\nCould be used for changing ownership of files in customisation layer.\n", "loc": ["dockerTools", "streamLayeredImage", "fakeRootCommands"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "dockerTools.streamLayeredImage.fromImage": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "Parent image, to append to.", "loc": ["dockerTools", "streamLayeredImage", "fromImage"], "readOnly": false, "type": "null or string"}, "dockerTools.streamLayeredImage.includeNixDB": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to generate a Nix DB. The DB won't be merged between multiple stages.\n", "loc": ["dockerTools", "streamLayeredImage", "includeNixDB"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.includeStorePaths": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "true"}, "description": "Whether to include store paths in the image. You generally want to leave\nthis on, but tooling may disable this to insert the store paths more\nefficiently via other means, such as bind mounting the host store.\n", "loc": ["dockerTools", "streamLayeredImage", "includeStorePaths"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.maxLayers": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "100"}, "description": "We pick 100 to ensure there is plenty of room for extension. I\nbelieve the actual maximum is 128.\n", "loc": ["dockerTools", "streamLayeredImage", "maxLayers"], "readOnly": false, "type": "signed integer"}, "dockerTools.streamLayeredImage.passthru": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Passthru arguments for the underlying derivation.", "loc": ["dockerTools", "streamLayeredImage", "passthru"], "readOnly": false, "type": "attribute set of anything"}, "dockerTools.streamLayeredImage.streamScript": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "<derivation stream>"}, "description": "Path to streaming script", "loc": ["dockerTools", "streamLayeredImage", "streamScript"], "readOnly": false, "type": "path"}, "dockerTools.streamLayeredImage.tag": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "Image tag, the Nix's output hash will be used if null", "loc": ["dockerTools", "streamLayeredImage", "tag"], "readOnly": false, "type": "null or string"}, "public": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/public/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/public/interface.nix"}], "description": "The final result of the evaluated package.\nContains everything that nix expects from a derivation.\nContains fields like name, outputs, drvPath, outPath, etc.\nCan be build with nix-build or `nix build`.\n", "loc": ["public"], "readOnly": false, "type": "lazy attribute set of anything"}}