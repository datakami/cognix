{"_module.args": {"declarations": [{"name": "lib/modules.nix", "url": "lib/modules.nix"}], "description": "Additional arguments passed to each module in addition to ones\nlike `lib`, `config`,\nand `pkgs`, `modulesPath`.\n\nThis option is also available to all submodules. Submodules do not\ninherit args from their parent module, nor do they provide args to\ntheir parent module or sibling submodules. The sole exception to\nthis is the argument `name` which is provided by\nparent modules to a submodule and contains the attribute name\nthe submodule is bound to, or a unique generated name if it is\nnot bound to an attribute.\n\nSome arguments are already passed by default, of which the\nfollowing *cannot* be changed with this option:\n- {var}`lib`: The nixpkgs library.\n- {var}`config`: The results of all options after merging the values from all modules together.\n- {var}`options`: The options declared in all modules.\n- {var}`specialArgs`: The `specialArgs` argument passed to `evalModules`.\n- All attributes of {var}`specialArgs`\n\n  Whereas option values can generally depend on other option values\n  thanks to laziness, this does not apply to `imports`, which\n  must be computed statically before anything else.\n\n  For this reason, callers of the module system can provide `specialArgs`\n  which are available during import resolution.\n\n  For NixOS, `specialArgs` includes\n  {var}`modulesPath`, which allows you to import\n  extra modules from the nixpkgs package tree without having to\n  somehow make the module aware of the location of the\n  `nixpkgs` or NixOS directories.\n  ```\n  { modulesPath, ... }: {\n    imports = [\n      (modulesPath + \"/profiles/minimal.nix\")\n    ];\n  }\n  ```\n\nFor NixOS, the default value for this option includes at least this argument:\n- {var}`pkgs`: The nixpkgs package set according to\n  the {option}`nixpkgs.pkgs` option.\n", "loc": ["_module", "args"], "readOnly": false, "type": "lazy attribute set of raw value"}, "cog.build.cog_version": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"0.9.4\""}, "description": "The cog-python version to add to the image.", "loc": ["cog", "build", "cog_version"], "readOnly": false, "type": "string"}, "cog.build.cuda": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "description": "This option has no description.", "loc": ["cog", "build", "cuda"], "readOnly": false, "type": "one of <null>, \"11.0\", \"11.1\", \"11.3\", \"11.5\", \"11.6\", \"11.7\", \"11.8\", \"12.1\""}, "cog.build.gpu": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to enable GPU support.", "example": {"_type": "literalExpression", "text": "true"}, "loc": ["cog", "build", "gpu"], "readOnly": false, "type": "boolean"}, "cog.build.python_extra_index_urls": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Extra python repositories to use.\n", "loc": ["cog", "build", "python_extra_index_urls"], "readOnly": false, "type": "list of string"}, "cog.build.python_packages": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "A list of Python packages to install, from all of the specified repositories in\n`python_extra_index_urls`.\n", "example": {"_type": "literalExpression", "text": "[\n  \"torch\"\n]"}, "loc": ["cog", "build", "python_packages"], "readOnly": false, "type": "list of string"}, "cog.build.python_snapshot_date": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "When writing the lock file, ignore packages published to repositories after this date.\n", "loc": ["cog", "build", "python_snapshot_date"], "readOnly": false, "type": "null or string"}, "cog.build.python_version": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "description": "The minor version of Python to use.\n", "example": {"_type": "literalExpression", "text": "\"3.11\""}, "loc": ["cog", "build", "python_version"], "readOnly": false, "type": "one of \"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\""}, "cog.build.system_packages": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "A list of Nix packages to install. A full list of the available packages can be found at\nhttps://search.nixos.org/packages .\nAdditionally, [pget](https://github.com/replicate/pget) is also available here, along with any other\npackages custom added to `cognix.systemPackages`.\n", "example": {"_type": "literalExpression", "text": "[\n  \"pget\"\n  \"openmpi\"\n]"}, "loc": ["cog", "build", "system_packages"], "readOnly": false, "type": "list of (path or string)"}, "cog.concurrency.max": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "1"}, "description": "Allowed concurrency", "loc": ["cog", "concurrency", "max"], "readOnly": false, "type": "signed integer"}, "cog.predict": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"predict.py:Predictor\""}, "description": "The pointer to the Predictor object in your code, which defines how predictions are run on your model.\n", "loc": ["cog", "predict"], "readOnly": false, "type": "string"}, "cog.train": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "The pointer to the train function in your code, which defines how your model can be trained.\n", "example": {"_type": "literalExpression", "text": "\"train.py:train\""}, "loc": ["cog", "train"], "readOnly": false, "type": "null or string"}, "cognix.addCudaLibraryPath": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "true"}, "description": "Whether to add the CUDA paths from docker-nvidia to LD_LIBRARY_PATH.\nDisable to sanity check your dependencies.\n", "loc": ["cognix", "addCudaLibraryPath"], "readOnly": false, "type": "boolean"}, "cognix.environment": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Set these environment variables in the image.\n", "loc": ["cognix", "environment"], "readOnly": false, "type": "attribute set of anything"}, "cognix.fake_pip": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Install a fake pip wrapper that does nothing.\n\nThis is useful because replicate calls `pip install cog==...` before starting your image, which you may not want when using a patched version of cog's python library.\n", "loc": ["cognix", "fake_pip"], "readOnly": false, "type": "boolean"}, "cognix.includeNix": {"declarations": [{"name": "cognix/modules/cog/nix.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/nix.nix"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to add Nix to the image so it can be used to install more packages at run-time.\nThis also sets the NIX_PATH so nixpkgs points to the nixpkgs used in cognix.\n", "loc": ["cognix", "includeNix"], "readOnly": false, "type": "boolean"}, "cognix.nix.extraOptions": {"declarations": [{"name": "cognix/modules/cog/nix.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/nix.nix"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Additional text appended to {file}`nix.conf` inside the image, when includeNix = true.\n", "example": {"_type": "literalExpression", "text": "''\n  cores = 4\n''"}, "loc": ["cognix", "nix", "extraOptions"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "cognix.openapi_schema": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "description": "Specify a path to openapi.json added to the image. Defaults to the spec generated using python -m cog.command.openapi_schema.\n", "loc": ["cognix", "openapi_schema"], "readOnly": false, "type": "path"}, "cognix.postCopyCommands": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Commands to run after gathering all the files for the container /src dir", "example": {"_type": "literalExpression", "text": "''\n  touch $out/src/.env\n''"}, "loc": ["cognix", "postCopyCommands"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "cognix.python_root_packages": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "Only include the dependencies of these python packages in the final image. This allows you to build multiple images with the same `lock.json`, containing different subsets of python packages.\n", "example": {"_type": "literalExpression", "text": "[\n  \"nvidia-pytriton\"\n  \"transformers\"\n  \"tokenizers\"\n]"}, "loc": ["cognix", "python_root_packages"], "readOnly": false, "type": "null or (list of string)"}, "cognix.rootPath": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "description": "Path containing cog.yaml, predict.py, .dockerignore", "loc": ["cognix", "rootPath"], "readOnly": false, "type": "string"}, "cognix.sourceIgnores": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "gitignore syntax, don't copy these files to the /src package in the image\n", "example": {"_type": "literalExpression", "text": "''\n  /models/*\n''"}, "loc": ["cognix", "sourceIgnores"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "cognix.systemPackages": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Packages to make available for `cog.build.system_packages`.\n", "loc": ["cognix", "systemPackages"], "readOnly": false, "type": "attribute set of package"}, "deps": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/deps", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/deps"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "All dependencies of the package. This option should be set by the \"outer world\" and can be used to inherit attributes from `pkgs` or `inputs` etc.\n\nBy separating the task of retrieving things from the outside world, it is ensured that the dependencies are overridable.\nNothing will stop users from adding `nixpkgs` itself as a dependency, but this will make it very hard for the user of the package to override any dependencies, because they'd have to figure out a way to insert their changes into the Nixpkgs fixpoint. By adding specific attributes to `deps` instead, the user has a realistic chance of overriding those dependencies.\n\nSo deps should be specific, but not overly specific. For instance, the caller shouldn't have to know the version of a dependency in order to override it. The name should suffice. (e.g. `nix = nixVersions.nix_2_12` instead of `inherit (nixVersions) nix_2_12`.\n", "example": {"_type": "literalExpression", "text": "{nixpkgs, ...}: {\n  inherit (nixpkgs) stdenv;\n  inherit (nixpkgs.haskellPackages) pandoc;\n}\n"}, "loc": ["deps"], "readOnly": false, "type": "lazy attribute set of raw value"}, "dockerTools.streamLayeredImage.architecture": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"amd64\""}, "description": "Image architecture, defaults to the architecture of the `hostPlatform` when unset", "loc": ["dockerTools", "streamLayeredImage", "architecture"], "readOnly": false, "type": "string"}, "dockerTools.streamLayeredImage.config": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Docker config; e.g. what command to run on the container.", "loc": ["dockerTools", "streamLayeredImage", "config"], "readOnly": false, "type": "attribute set of anything"}, "dockerTools.streamLayeredImage.contents": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Files to put on the image (a nix store path or list of paths).", "loc": ["dockerTools", "streamLayeredImage", "contents"], "readOnly": false, "type": "list of package"}, "dockerTools.streamLayeredImage.created": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"1970-01-01T00:00:01Z\""}, "description": "Time of creation of the image. Passing \"now\" will\nmake the created date be the time of building.\n", "loc": ["dockerTools", "streamLayeredImage", "created"], "readOnly": false, "type": "string"}, "dockerTools.streamLayeredImage.enableFakechroot": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to run fakeRootCommands in fakechroot as well, so that they\nappear to run inside the image, but have access to the normal Nix store.\nPerhaps this could be enabled on by default on pkgs.stdenv.buildPlatform.isLinux\n", "loc": ["dockerTools", "streamLayeredImage", "enableFakechroot"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.extraCommands": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Optional bash script to run on the files prior to fixturizing the layer.", "loc": ["dockerTools", "streamLayeredImage", "extraCommands"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "dockerTools.streamLayeredImage.extraJSONFile": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"/nix/store/6llq5mliaf03nj25ib0lm841cgjw5mbg-empty.json\""}, "description": "JSON file that's merged into the stream configuration.\nUse this to add things only available at build time, such as other build results.\n", "loc": ["dockerTools", "streamLayeredImage", "extraJSONFile"], "readOnly": false, "type": "path"}, "dockerTools.streamLayeredImage.fakeRootCommands": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "\"\""}, "description": "Optional bash script to run inside fakeroot environment.\nCould be used for changing ownership of files in customisation layer.\n", "loc": ["dockerTools", "streamLayeredImage", "fakeRootCommands"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "dockerTools.streamLayeredImage.fromImage": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "Parent image, to append to.", "loc": ["dockerTools", "streamLayeredImage", "fromImage"], "readOnly": false, "type": "null or string"}, "dockerTools.streamLayeredImage.includeNixDB": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "false"}, "description": "Whether to generate a Nix DB. The DB won't be merged between multiple stages.\n", "loc": ["dockerTools", "streamLayeredImage", "includeNixDB"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.includeStorePaths": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "true"}, "description": "Whether to include store paths in the image. You generally want to leave\nthis on, but tooling may disable this to insert the store paths more\nefficiently via other means, such as bind mounting the host store.\n", "loc": ["dockerTools", "streamLayeredImage", "includeStorePaths"], "readOnly": false, "type": "boolean"}, "dockerTools.streamLayeredImage.maxLayers": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "100"}, "description": "We pick 100 to ensure there is plenty of room for extension. I\nbelieve the actual maximum is 128.\n", "loc": ["dockerTools", "streamLayeredImage", "maxLayers"], "readOnly": false, "type": "signed integer"}, "dockerTools.streamLayeredImage.passthru": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Passthru arguments for the underlying derivation.", "loc": ["dockerTools", "streamLayeredImage", "passthru"], "readOnly": false, "type": "attribute set of anything"}, "dockerTools.streamLayeredImage.streamScript": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "<derivation stream>"}, "description": "Path to streaming script", "loc": ["dockerTools", "streamLayeredImage", "streamScript"], "readOnly": false, "type": "path"}, "dockerTools.streamLayeredImage.tag": {"declarations": [{"name": "cognix/modules/stream-layered-image", "url": "https://github.com/datakami/cognix/blob/main/modules/stream-layered-image"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "Image tag, the Nix's output hash will be used if null", "loc": ["dockerTools", "streamLayeredImage", "tag"], "readOnly": false, "type": "null or string"}, "env": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/env", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/env"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "environment variables passed to the build environment\n", "loc": ["env"], "readOnly": false, "type": "attribute set of (null or boolean or signed integer or string or path or package or list of (boolean or signed integer or string or path or package))"}, "lock.content": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "The content of the lock file.\nAll fields declared via `lock.fields` are contained pointing to their respective values.\n", "loc": ["lock", "content"], "readOnly": false, "type": "anything"}, "lock.extraScripts": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Extra shell scripts to execute when `nix run .#{package}.lock` is called.\n\nThis allows adding custom logic to the lock file generation.\n", "loc": ["lock", "extraScripts"], "readOnly": false, "type": "list of path"}, "lock.fields": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Fields of the lock file", "example": {"_type": "literalExpression", "text": "{\n  pname = true;\n  version = true;\n}"}, "loc": ["lock", "fields"], "readOnly": false, "type": "attribute set of (submodule)"}, "lock.fields.<name>.default": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "The default value in case the lock file doesn't exist or doesn't yet contain the field.\n", "loc": ["lock", "fields", "<name>", "default"], "readOnly": false, "type": "null or anything"}, "lock.fields.<name>.script": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "A script to refresh the value of this lock file field.\nThe script should write the result as json file to $out.\n", "loc": ["lock", "fields", "<name>", "script"], "readOnly": false, "type": "path"}, "lock.invalidationData": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Pass any data that should invalidate the lock file when changed.\nThis is useful for example when the lock file should be regenerated\nwhen the requirements change.\n", "example": {"_type": "literalExpression", "text": "{\n  pip = {\n    lockVersion = \"2\";\n    requirements = [\n      \"requests\"\n      \"pillow\"\n    ];\n  };\n}"}, "loc": ["lock", "invalidationData"], "readOnly": false, "type": "anything"}, "lock.lib.computeFODHash": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Helper function to write the hash of a given FOD to $out.\n", "loc": ["lock", "lib", "computeFODHash"], "readOnly": true, "type": "function that evaluates to a(n) path"}, "lock.refresh": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Script to refresh the lock file", "loc": ["lock", "refresh"], "readOnly": true, "type": "package"}, "name": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/ui/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/ui/interface.nix"}], "description": "The name of the package", "loc": ["name"], "readOnly": false, "type": "string"}, "paths.cacheFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"cache.json\""}, "description": "Path to the eval cache file of the current package.\nRelative to \"${paths.projectRoot}/${paths.package}\"\".\n", "loc": ["paths", "cacheFile"], "readOnly": false, "type": "string"}, "paths.lockFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"lock.json\""}, "description": "Path to the lock file of the current package.\nRelative to \"${paths.projectRoot}/${paths.package}\"\".\n", "loc": ["paths", "lockFile"], "readOnly": false, "type": "string"}, "paths.package": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "description": "Path to the directory containing the definition of the current package.\nRelative to 'paths.projectRoot'.\n\nThis helps locating package definitions for lock & update scripts.\n", "loc": ["paths", "package"], "readOnly": false, "type": "path or string"}, "paths.projectRoot": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "description": "Path to the root of the project on which dream2nix operates.\nMust contain the marker file specified by 'paths.projectRootFile'\n\nThis helps locating lock files at evaluation time.\n", "example": {"_type": "literalExpression", "text": "./."}, "loc": ["paths", "projectRoot"], "readOnly": false, "type": "path"}, "paths.projectRootFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\".git\""}, "description": "File name to look for to determine the root of the project.\nEnsure 'paths.projectRoot' contains a file named like this.\n\nThis helps locating package definitions for lock & update scripts.\n", "example": {"_type": "literalExpression", "text": "\".git\""}, "loc": ["paths", "projectRootFile"], "readOnly": false, "type": "string"}, "public": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/public/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/public/interface.nix"}, {"name": "dream2nix/modules/dream2nix/core/docs", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/docs"}], "description": "The final result of the evaluated package.\nContains everything that nix expects from a derivation.\nContains fields like name, outputs, drvPath, outPath, etc.\nCan be build with nix-build or `nix build`.\n", "loc": ["public"], "readOnly": false, "type": "lazy attribute set of anything"}, "public.docs": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/docs", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/docs"}], "description": "The manual of the package as a website", "loc": ["public", "docs"], "readOnly": true, "type": "package"}, "python-env": {"declarations": [{"name": "cognix/modules/cog/interface.nix", "url": "https://github.com/datakami/cognix/blob/main/modules/cog/interface.nix"}], "description": "Sub-module containing the python environment that's used in the image.\n", "loc": ["python-env"], "readOnly": false, "type": "submodule"}, "python-env.deps": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/deps", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/deps"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "All dependencies of the package. This option should be set by the \"outer world\" and can be used to inherit attributes from `pkgs` or `inputs` etc.\n\nBy separating the task of retrieving things from the outside world, it is ensured that the dependencies are overridable.\nNothing will stop users from adding `nixpkgs` itself as a dependency, but this will make it very hard for the user of the package to override any dependencies, because they'd have to figure out a way to insert their changes into the Nixpkgs fixpoint. By adding specific attributes to `deps` instead, the user has a realistic chance of overriding those dependencies.\n\nSo deps should be specific, but not overly specific. For instance, the caller shouldn't have to know the version of a dependency in order to override it. The name should suffice. (e.g. `nix = nixVersions.nix_2_12` instead of `inherit (nixVersions) nix_2_12`.\n", "example": {"_type": "literalExpression", "text": "{nixpkgs, ...}: {\n  inherit (nixpkgs) stdenv;\n  inherit (nixpkgs.haskellPackages) pandoc;\n}\n"}, "loc": ["python-env", "deps"], "readOnly": false, "type": "lazy attribute set of raw value"}, "python-env.env": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/env", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/env"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "environment variables passed to the build environment\n", "loc": ["python-env", "env"], "readOnly": false, "type": "attribute set of (null or boolean or signed integer or string or path or package or list of (boolean or signed integer or string or path or package))"}, "python-env.lock.content": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "The content of the lock file.\nAll fields declared via `lock.fields` are contained pointing to their respective values.\n", "loc": ["python-env", "lock", "content"], "readOnly": false, "type": "anything"}, "python-env.lock.extraScripts": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Extra shell scripts to execute when `nix run .#{package}.lock` is called.\n\nThis allows adding custom logic to the lock file generation.\n", "loc": ["python-env", "lock", "extraScripts"], "readOnly": false, "type": "list of path"}, "python-env.lock.fields": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Fields of the lock file", "example": {"_type": "literalExpression", "text": "{\n  pname = true;\n  version = true;\n}"}, "loc": ["python-env", "lock", "fields"], "readOnly": false, "type": "attribute set of (submodule)"}, "python-env.lock.fields.<name>.default": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "The default value in case the lock file doesn't exist or doesn't yet contain the field.\n", "loc": ["python-env", "lock", "fields", "<name>", "default"], "readOnly": false, "type": "null or anything"}, "python-env.lock.fields.<name>.script": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "A script to refresh the value of this lock file field.\nThe script should write the result as json file to $out.\n", "loc": ["python-env", "lock", "fields", "<name>", "script"], "readOnly": false, "type": "path"}, "python-env.lock.invalidationData": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Pass any data that should invalidate the lock file when changed.\nThis is useful for example when the lock file should be regenerated\nwhen the requirements change.\n", "example": {"_type": "literalExpression", "text": "{\n  pip = {\n    lockVersion = \"2\";\n    requirements = [\n      \"requests\"\n      \"pillow\"\n    ];\n  };\n}"}, "loc": ["python-env", "lock", "invalidationData"], "readOnly": false, "type": "anything"}, "python-env.lock.lib.computeFODHash": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Helper function to write the hash of a given FOD to $out.\n", "loc": ["python-env", "lock", "lib", "computeFODHash"], "readOnly": true, "type": "function that evaluates to a(n) path"}, "python-env.lock.refresh": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Script to refresh the lock file", "loc": ["python-env", "lock", "refresh"], "readOnly": true, "type": "package"}, "python-env.name": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/ui/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/ui/interface.nix"}], "description": "The name of the package", "loc": ["python-env", "name"], "readOnly": false, "type": "string"}, "python-env.paths.cacheFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"cache.json\""}, "description": "Path to the eval cache file of the current package.\nRelative to \"${paths.projectRoot}/${paths.package}\"\".\n", "loc": ["python-env", "paths", "cacheFile"], "readOnly": false, "type": "string"}, "python-env.paths.lockFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\"lock.json\""}, "description": "Path to the lock file of the current package.\nRelative to \"${paths.projectRoot}/${paths.package}\"\".\n", "loc": ["python-env", "paths", "lockFile"], "readOnly": false, "type": "string"}, "python-env.paths.package": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "description": "Path to the directory containing the definition of the current package.\nRelative to 'paths.projectRoot'.\n\nThis helps locating package definitions for lock & update scripts.\n", "loc": ["python-env", "paths", "package"], "readOnly": false, "type": "path or string"}, "python-env.paths.projectRoot": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "description": "Path to the root of the project on which dream2nix operates.\nMust contain the marker file specified by 'paths.projectRootFile'\n\nThis helps locating lock files at evaluation time.\n", "example": {"_type": "literalExpression", "text": "./."}, "loc": ["python-env", "paths", "projectRoot"], "readOnly": false, "type": "path"}, "python-env.paths.projectRootFile": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/paths/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/paths/interface.nix"}], "default": {"_type": "literalExpression", "text": "\".git\""}, "description": "File name to look for to determine the root of the project.\nEnsure 'paths.projectRoot' contains a file named like this.\n\nThis helps locating package definitions for lock & update scripts.\n", "example": {"_type": "literalExpression", "text": "\".git\""}, "loc": ["python-env", "paths", "projectRootFile"], "readOnly": false, "type": "string"}, "python-env.public": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/public/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/public/interface.nix"}, {"name": "dream2nix/modules/dream2nix/core/docs", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/docs"}], "description": "The final result of the evaluated package.\nContains everything that nix expects from a derivation.\nContains fields like name, outputs, drvPath, outPath, etc.\nCan be build with nix-build or `nix build`.\n", "loc": ["python-env", "public"], "readOnly": false, "type": "lazy attribute set of anything"}, "python-env.public.docs": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/docs", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/docs"}], "description": "The manual of the package as a website", "loc": ["python-env", "public", "docs"], "readOnly": true, "type": "package"}, "python-env.version": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/ui/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/ui/interface.nix"}], "description": "The version of the package", "loc": ["python-env", "version"], "readOnly": false, "type": "string"}, "version": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/ui/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/ui/interface.nix"}], "description": "The version of the package", "loc": ["version"], "readOnly": false, "type": "string"}}