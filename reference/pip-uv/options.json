{"_module.args": {"declarations": [{"name": "lib/modules.nix", "url": "lib/modules.nix"}], "description": "Additional arguments passed to each module in addition to ones\nlike `lib`, `config`,\nand `pkgs`, `modulesPath`.\n\nThis option is also available to all submodules. Submodules do not\ninherit args from their parent module, nor do they provide args to\ntheir parent module or sibling submodules. The sole exception to\nthis is the argument `name` which is provided by\nparent modules to a submodule and contains the attribute name\nthe submodule is bound to, or a unique generated name if it is\nnot bound to an attribute.\n\nSome arguments are already passed by default, of which the\nfollowing *cannot* be changed with this option:\n- {var}`lib`: The nixpkgs library.\n- {var}`config`: The results of all options after merging the values from all modules together.\n- {var}`options`: The options declared in all modules.\n- {var}`specialArgs`: The `specialArgs` argument passed to `evalModules`.\n- All attributes of {var}`specialArgs`\n\n  Whereas option values can generally depend on other option values\n  thanks to laziness, this does not apply to `imports`, which\n  must be computed statically before anything else.\n\n  For this reason, callers of the module system can provide `specialArgs`\n  which are available during import resolution.\n\n  For NixOS, `specialArgs` includes\n  {var}`modulesPath`, which allows you to import\n  extra modules from the nixpkgs package tree without having to\n  somehow make the module aware of the location of the\n  `nixpkgs` or NixOS directories.\n  ```\n  { modulesPath, ... }: {\n    imports = [\n      (modulesPath + \"/profiles/minimal.nix\")\n    ];\n  }\n  ```\n\nFor NixOS, the default value for this option includes at least this argument:\n- {var}`pkgs`: The nixpkgs package set according to\n  the {option}`nixpkgs.pkgs` option.\n", "loc": ["_module", "args"], "readOnly": false, "type": "lazy attribute set of raw value"}, "deps": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/deps", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/deps"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "All dependencies of the package. This option should be set by the \"outer world\" and can be used to inherit attributes from `pkgs` or `inputs` etc.\n\nBy separating the task of retrieving things from the outside world, it is ensured that the dependencies are overridable.\nNothing will stop users from adding `nixpkgs` itself as a dependency, but this will make it very hard for the user of the package to override any dependencies, because they'd have to figure out a way to insert their changes into the Nixpkgs fixpoint. By adding specific attributes to `deps` instead, the user has a realistic chance of overriding those dependencies.\n\nSo deps should be specific, but not overly specific. For instance, the caller shouldn't have to know the version of a dependency in order to override it. The name should suffice. (e.g. `nix = nixVersions.nix_2_12` instead of `inherit (nixVersions) nix_2_12`.\n", "example": {"_type": "literalExpression", "text": "{nixpkgs, ...}: {\n  inherit (nixpkgs) stdenv;\n  inherit (nixpkgs.haskellPackages) pandoc;\n}\n"}, "loc": ["deps"], "readOnly": false, "type": "lazy attribute set of raw value"}, "lock.content": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "The content of the lock file.\nAll fields declared via `lock.fields` are contained pointing to their respective values.\n", "loc": ["lock", "content"], "readOnly": false, "type": "anything"}, "lock.extraScripts": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Extra shell scripts to execute when `nix run .#{package}.lock` is called.\n\nThis allows adding custom logic to the lock file generation.\n", "loc": ["lock", "extraScripts"], "readOnly": false, "type": "list of path"}, "lock.fields": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Fields of the lock file", "example": {"_type": "literalExpression", "text": "{\n  pname = true;\n  version = true;\n}"}, "loc": ["lock", "fields"], "readOnly": false, "type": "attribute set of (submodule)"}, "lock.fields.<name>.default": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "null"}, "description": "The default value in case the lock file doesn't exist or doesn't yet contain the field.\n", "loc": ["lock", "fields", "<name>", "default"], "readOnly": false, "type": "null or anything"}, "lock.fields.<name>.script": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "A script to refresh the value of this lock file field.\nThe script should write the result as json file to $out.\n", "loc": ["lock", "fields", "<name>", "script"], "readOnly": false, "type": "path"}, "lock.invalidationData": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "default": {"_type": "literalExpression", "text": "{ }"}, "description": "Pass any data that should invalidate the lock file when changed.\nThis is useful for example when the lock file should be regenerated\nwhen the requirements change.\n", "example": {"_type": "literalExpression", "text": "{\n  pip = {\n    lockVersion = \"2\";\n    requirements = [\n      \"requests\"\n      \"pillow\"\n    ];\n  };\n}"}, "loc": ["lock", "invalidationData"], "readOnly": false, "type": "anything"}, "lock.lib.computeFODHash": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Helper function to write the hash of a given FOD to $out.\n", "loc": ["lock", "lib", "computeFODHash"], "readOnly": true, "type": "function that evaluates to a(n) path"}, "lock.refresh": {"declarations": [{"name": "dream2nix/modules/dream2nix/core/lock/interface.nix", "url": "https://github.com/nix-community/dream2nix/blob/master/modules/dream2nix/core/lock/interface.nix"}], "description": "Script to refresh the lock file", "loc": ["lock", "refresh"], "readOnly": true, "type": "package"}, "pip.constraintsList": {"declarations": [{"name": "cognix/modules/pip-uv", "url": "https://github.com/datakami/cognix/blob/main/modules/pip-uv"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Constrain versions using the given requirements.\n\nConstraints are `requirements.txt`-like entries that only control the _version_ of a requirement that's installed. However, including a package in constraints will _not_ trigger the installation of that package.\n", "loc": ["pip", "constraintsList"], "readOnly": false, "type": "list of string"}, "pip.overridesList": {"declarations": [{"name": "cognix/modules/pip-uv", "url": "https://github.com/datakami/cognix/blob/main/modules/pip-uv"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Override versions using the given requirements files.\n\nOverrides specify a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.\n\nWhile constraints are _additive_, in that they're combined with the requirements of the constituent packages, overrides are _absolute_, in that they completely replace the requirements of the constituent packages.\n", "loc": ["pip", "overridesList"], "readOnly": false, "type": "list of string"}, "pip.uv.enable": {"declarations": [{"name": "cognix/modules/pip-uv", "url": "https://github.com/datakami/cognix/blob/main/modules/pip-uv"}], "default": {"_type": "literalExpression", "text": "true"}, "description": "use uv solver", "loc": ["pip", "uv", "enable"], "readOnly": false, "type": "boolean"}, "pip.uv.extraArgs": {"declarations": [{"name": "cognix/modules/pip-uv", "url": "https://github.com/datakami/cognix/blob/main/modules/pip-uv"}], "default": {"_type": "literalExpression", "text": "[ ]"}, "description": "Extra arguments to pass the the `uv` solver.", "loc": ["pip", "uv", "extraArgs"], "readOnly": false, "type": "list of string"}}